Problem Description:

Given an n by m rectangular chessboard with some cells containing chess pieces, two players take turns playing the game. The player who has the turn can choose to remove all the chess pieces in a vertical or horizontal row or column that has at least one chess piece. The game ends when all the chess pieces are removed. The winner is determined by the total number of chess pieces removed by each player, with more pieces removed indicating a win, a tie, or a loss.

Here's an example of a possible process on a 4-row 3-column chessboard, where 1 represents a chess piece and 0 represents an empty cell: [[1, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 1]]. If the first player removes two pieces from the first row, then the second player removes three pieces from the third column, and finally the first player removes the remaining two pieces from the fourth row. In this game, the first player gets 2 + 2 pieces, and the second player gets 3 pieces. Therefore, the first player wins by 1 piece.

Input description:
The input data is the initial board state, which stored in the input.txt file. The first line contains two integers, n and m, representing the number of columns and rows of the chessboard, respectively. The values of n and m satisfy 1 ≤ n, m ≤ 8. The following n lines contain m space-separated numbers, either 0 or 1, indicating the placement of chess pieces in each column of the initial board state. 1 represents a cell with a chess piece, while 0 represents an empty cell. Note that the given board state will have at least one chess piece.

Output description:
The output data should be stored in the output.txt file. The program should output three lines:
The first line should contain one or more numbers separated by spaces, indicating the best move for the first player, either a row or a column position. Use "Row #" or "Column #" followed by the position number from 1 to 8 to represent the position.
The second line should indicate how many pieces the first player will win or lose. A positive number indicates a win, a negative number indicates a loss, and 0 indicates a tie.
The third line should display the total execution time, which can be obtained using a time function.

Output is slightly wrong
Sample Input 1:
3 4
1 0 0 1
0 0 0 1
1 1 1 1

Expected Output 1:
Row#: 3
+3 points
Total run time = 0.08 seconds.

Your Output 1:
Row#: 3
4 points
Total run time = 0.00 seconds.

---

Sample Input 2:
3 4
1 1 1 1
0 0 0 0
1 1 1 1

Expected Output 2:
Row#: 1
0 points
Total run time = 0.03 seconds.

Your Output 2:
Row#: 1
4 points
Total run time = 0.00 seconds.


---

Sample Input 3:
4 8
1 1 1 1 0 0 0 0
0 0 0 1 1 1 1 1
0 0 0 1 1 1 1 1
1 1 1 1 0 0 0 0

Expected Output 3:
Column #: 4
4 points
Total run time = 0.6 seconds.

Your Output 3:
Row#: 1
4 points
Total run time = 0.42 seconds.


You
Note:

1. Please use the alpha-beta pruning algorithm to develop a program for making moves in this game. The ability to make moves is essential, but it's even better if the program is fast, intelligent, and has an attractive interface.
2. The source code should include appropriate comments.
3. There should be at least 5 input files. Vary the board sizes and the difficulty levels as you see fit. Please explain how you created these test input files. (Hint: Consider using random number generation.)
4. Use Python.
5. Check the code will get Expected Output as example